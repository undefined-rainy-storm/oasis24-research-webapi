{"version":3,"file":"map.naver.js","sourceRoot":"","sources":["../../src/elements/map.naver.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAA;AACtC,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAA;AAGxD,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,UAAU;IAUtC,MAAM,KAAc,UAAU;QAC5B,OAAO;YACL,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YACrB,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YACrB,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;SACvB,CAAA;IACH,CAAC;IAED,YACE,MAAc,QAAQ,EACtB,MAAc,SAAS,EACvB,OAAe,EAAE;QAEjB,KAAK,EAAE,CAAA;QAjBT,UAAK,GAA0C,EAAE,CAAA;QACjD,sBAAiB,GAAW,CAAC,CAAA;QAsBpB,WAAM,GAAG,GAAG,EAAE;YACrB,OAAO,IAAI,CAAA;;;;;;KAMV,CAAA;QACH,CAAC,CAAA;QAEQ,iBAAY,GAAG,GAAG,EAAE;YAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,UAAW,CAAC,cAAc,CAAC,SAAS,CAAC,CAAA;YAChE,IAAI,aAAa;gBAAE,IAAI,CAAC,WAAW,GAAG,aAAa,CAAA;YAEnD,IAAI,CAAC,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,aAAc,EAAE;gBAC5C,MAAM,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAa,EAAE,IAAI,CAAC,GAAa,CAAC;gBACrE,IAAI,EAAE,IAAI,CAAC,IAAc;aAC1B,CAAC,CAAA;QACJ,CAAC,CAAA;QAED,iBAAiB;QACjB;;;;UAIE;QAEF,YAAO,GAAG,CACR,GAAuB,EACvB,KAA8B,EAC9B,EAAE;YACF,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;gBACtB,GAAG,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAA;YAC5C,CAAC;YACD,MAAM,OAAO,GAA6B,EAAE,CAAA;YAC5C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAW,EAAE,IAAI,CAAC,CAAC,CAAW,CAAC,CAAC,CAAA;YAC3E,CAAC;YACD,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;gBACb,IAAI,CAAC,KAAK,CAAC,GAAa,CAAC,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;oBAClD,GAAG,EAAE,IAAI,CAAC,GAAG;oBACb,IAAI,EAAE,OAAO;iBACd,CAAC,CAAA;gBACF,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,iBAAiB,CAAC,CAAA;YACxC,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,KAAK,CAAC,gFAAgF,CAAC,CAAA;YACnG,CAAC;QAEH,CAAC,CAAA;QArDC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IAClB,CAAC;CAmDF,CAAA;AA5EU;IAAR,KAAK,EAAE;4CAAY;AACX;IAAR,KAAK,EAAE;4CAAY;AACX;IAAR,KAAK,EAAE;6CAAa;AAJjB,eAAe;IADpB,aAAa,CAAC,mBAAmB,CAAC;GAC7B,eAAe,CA8EpB","sourcesContent":["import { LitElement, html } from 'lit'\r\nimport { customElement, state } from 'lit/decorators.js'\r\n\r\n@customElement('map-wrapper-naver')\r\nclass MapWrapperNaver extends LitElement {\r\n  // Lit Properties and Methods (override)\r\n  @state() lat: Number\r\n  @state() lng: Number\r\n  @state() zoom: Number\r\n  map: naver.maps.Map | undefined\r\n  draws: { [id: string]: naver.maps.Polyline } = {}\r\n  drawsKeyGenerator: number = 0\r\n  htmlElement: HTMLElement | undefined\r\n\r\n  static override get properties() {\r\n    return {\r\n      lat: { type: Number },\r\n      lng: { type: Number },\r\n      zoom: { type: Number },\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    lat: Number = 35.17679,\r\n    lng: Number = 126.90681,\r\n    zoom: Number = 16,\r\n  ) {\r\n    super()\r\n    this.lat = lat\r\n    this.lng = lng\r\n    this.zoom = zoom\r\n  }\r\n\r\n  override render = () => {\r\n    return html`\r\n      <div\r\n        id=\"map-box\"\r\n        style=\"width: 100%; height: 400px;\"\r\n      >\r\n      </div>\r\n    `\r\n  }\r\n\r\n  override firstUpdated = () => {\r\n    const mapBoxElement = this.shadowRoot!.getElementById('map-box')\r\n    if (mapBoxElement) this.htmlElement = mapBoxElement\r\n\r\n    this.map = new naver.maps.Map(mapBoxElement!, {\r\n      center: new naver.maps.LatLng(this.lat as number, this.lng as number),\r\n      zoom: this.zoom as number\r\n    })\r\n  }\r\n\r\n  // Custom Methods\r\n  /*\r\n    How to use\r\n    const element: HTMLElement\r\n    element.[methodName]()\r\n  */\r\n\r\n  addPath = (\r\n    key: String | undefined,\r\n    paths: Array<[Number, Number]>\r\n  ) => {\r\n    if (key === undefined) {\r\n      key = new String(this.drawsKeyGenerator++)\r\n    }\r\n    const latLngs: Array<naver.maps.LatLng> = []\r\n    for (const each of paths) {\r\n      latLngs.push(new naver.maps.LatLng(each[0] as number, each[1] as number))\r\n    }\r\n    if (this.map) {\r\n      this.draws[key as string] = new naver.maps.Polyline({\r\n        map: this.map,\r\n        path: latLngs\r\n      })\r\n      console.log(paths + 'has been added.')\r\n    } else {\r\n      throw new Error('This <map-wrapper> object not constructed completly: broken map object binding')\r\n    }\r\n\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'map-wrapper-naver': MapWrapperNaver\r\n  }\r\n}\r\n"]}